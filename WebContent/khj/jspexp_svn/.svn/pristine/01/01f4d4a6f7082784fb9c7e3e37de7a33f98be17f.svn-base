# jsp로 데이터 베이스 처리
1. 공통 내용
	1) 화면설계 구성
	2) Database 설계
	3) database에 의한 SQL 작성
	4) VO 작성
	5) Database 모듈 작성
	6) jsp(View 화면 구성)
	7) 화면간의 데이터 전달	
--------------------------
2. list 화면 처리
3. 등록화면 처리
4. 상세화면 처리
	1) 데이터 로딩
	2) 수정 처리
	3) 삭제 처리
--------------------------
# SQL에 따른 DB모듈 구성
1. sql을 구성과 VO객체 생성.
2. DB모듈
	1) 공통 내용 선언과 활용
		- 공통 객체 field로 선언(Connection, Statement, ResultSet)
		- DB 연결 기능 메서드 선언(public void setConn();)
	2) 각 기능별로 메서드 선언 
		- 기능별로 공통 내용 : 연결메서드 호출, 예외처리, 자원해제
		
		- 리스트 : 입력?(조회되는 내용-객체), 결과?(ArrayList<Vo>)  
			ex) public ArrayList<Emp> getEmpList(Emp sch); 
		- 상세처리 : 입력?(조회 key를 매개), 결과?(VO)
			ex) public Emp getEmp(int empno);   
		- 등록처리 : 입력?(입력할 VO객체), 결과?(X-void)
			ex) public void insertEmp(Emp ins);   
		- 수정처리 : 입력?(수정할 VO객체), 결과?(X-void)
			ex) public void updateEmp(Emp sch);    
		- 삭제처리 : 입력?(삭제할 key를 매개), 결과?(X-void)
			ex) public void deleteEmp(int empno);   	

# jsp화면 구성과 화면간의 데이터 전달
1. 초기조회화면 - 주로 버튼 이벤트에 의한 js 처리.
	1) 조회될 데이터 내용을 요청값으로 처리되어야 한다.	
		?ename=himan&job=사원
	2) 등록화면 진입
		location.href="등록jsp화면"
	3) 상세화면 진입
		js로 해당 데이터 더블 클릭시, empno값을 기능함수에 전달
		location.href="상세jsp화면?empno=7777";
2. 등록화면
	1) 입력 후, 등록처리
		form으로 name=""으로 mapping된 데이터 request.getParameter("name의속성값")
		요청값들을 VO객체에 할당할 수
		Database 등록 처리 메서드에 매개값으로 전달. 
	2) 메인화면 이동.		
		location.href="메인화면"
3. 상세화면 : 
	0) 메인화면에서 온 검색을 위한 요청값, 수정을 처리하는 요청값,
		삭제처리하는 요청값을 구분하여 처리하여야 한다. 
		<input type="hidden" name="proc" value="upt"/>
		-- 삭제 클릭시, document.querySelector("proc").value="del";
		String proc=request.getParamter("proc");
	1) 수정
		form으로 name=""으로 mapping된 데이터 request.getParameter("name의속성값")
		요청값들을 VO객체에 할당할 수
		Database 수정 처리 메서드에 매개값으로 전달. 	
	2) 삭제
		삭제기능 버튼 클릭시, 현재 key값을 요청값으로 전달하고,
		location.href="삭제jsp화면?empno=7777";
		해당 요청값을 받아서 
		Database 삭제 처리 메서드에 매개값으로 전달.
	3) 메인화면 이동	
		location.href="메인화면"	

# jsp화면 요청처리와 Database 연결 처리.
1. list화면 처리
	1) form 화면 구성
		form method="post" : url로 요청값이 나타나지 않는다.
			name="ename" value="A"
			name="job" value="MAN"
			submit 버튼 클릭시,
		?ename=A&job=MAN
		String ename= request.getParameter("ename");
		Emp sch = new Emp(ename, job);
	2) DB모듈 호출과 출력 처리.	
		Database dao = new Database();
		ArrayList<Emp> elist = dao.getEmpList(sch);
		<%for(Emp e:elist){%>
			<%=e.getEmpno()%>
			<%=e.getEname()%>
2. 상세화면 기능 구분 DB 
	1) 상세데이터 list
		- list에서 데이터를 클릭시, empno값을 GET방식으로 넘긴다.
			a02_empDetail.jsp?empno=
		- int empno = Integer.parseInt(request.getParamter("empno"));
		- Database 모듈 호출과 단일 데이터 VO가져오기.
			Database dao = new Database();
			Emp emp = dao.getEmp(empno);
		- 화면 출력.
			사원번호 : <input type="text" name="empno" 
					value="<%=emp.getEmpno()%>"
	2) 수정처리
		- 수정할 폼내용 입력처리
			<form
			<input type="hidden" name="proc" value="upt"
		 	<input name="empno" value="<%=emp.getEmpno%>"
		 	<input name="ename" value="<%=emp.getEname%>"
		 	submit를 클릭시,
		 // 삭제와 구분하여 Database 처리 모듈을 선택하여야 하기 때문에..	
		 - String proc = request.getParameter("proc");	
		 if( proc.equals("upt") ){
		 	int empno = Integer.parseInt(request.getParamter("empno"));
		 	String ename = request.getParamter("ename");
		 	String job = request.getParamter("job");
		 	Emp upt = new Emp(empno, ename, job, ....);
		 	dao.updateEmp(upt);
		 }
	3) 삭제처리
		js  버튼클릭시.
			document.querySelector("[name=proc]").value="del";	
		 if( proc.equals("del") ){
		 	int empno = Integer.parseInt(request.getParamter("empno"));
		 	dao.deleteEmp(empno);
		 }
3. 기능별 Database 모듈 처리.
	1) list 조회..
		- 메서드  정의 기준:
			리스트하기 위하여, 어떤 데이터를 매개별로 넘기고, 
			결과를 나타낼 ArrayList 처리에 관한 내용..
		- 가장 필요한 데이터 기준 sql
			select empno, ename, job, mgr, hiredate,
				sal, comm,deptno
			from emp77
			where ename like '%'||''||'%'
			and job like '%'||''||'%';
			select ####  ==> VO, ArrayList<VO> 메서드에서 return 형식
			where ename = ### ==> 단일 데이터(String, int...) /VO(객체)
								메서드에서 매개변수로 활용
			1. VO : 전체 데이터에서 단위 데이터 한개를 객체화 하여 선언한다.
			2. VO가 list형태로 출력할 때, ArrayList<VO>
				ex) ArrayList<Emp>
			3. 조회 조건을 하나데이터 또는 여러 속성을 통해 등록, 수정할때는
				매개값으로 선언한다.
				ex) int empno,  Emp ins, Emp upt
		- 기능 메서드는 위에 내용을 참고해서.
				public ArrayList<Emp> getList(Emp sch){
					ArrayList<Emp> elist = new ArrayList<Emp>();
					return elist;
				}
				public Emp getEmp(int empno){
					Emp e = new Emp();
					return e;
				}	
		- 메서드 내부 처리.
			1. 연결(공통)
			2. 예외처리(공통)
			3. 대화객체
			4. ResultSet
			5. ResultSet ==> ArrayList<VO>전환처리.
			6. 자원해제(공통)
			String sql = "###";
			stmt = con.createStatement();
			rs= stmt.executeQuerey(sql);
			rs.next() : 행단위로 이동, 행에 데이터가 있을 true
			rs.getXXX("컬럼명") : 열단위 컬럼 접근. 데이터 가져오기
			rs.getXXX(1~..) : select 에서 선언한 순서로 접근.. 데이터 가져오기
			while(rs.next()){
				list.add(new Emp(rs.getInt("empno"), rs.getString("ename"),,
						..);   ArrayList에서 결과값을 할당 처리..
			}
	2) 데이터 등록처리(등록/수정/삭제 공통)
		- 메서드 선언.
			입력데이터만 매개변수로 선언..
			public void insert(Emp ins)
		- 처리 순서
			연결(공통)
			sql 선언.
			autocommit 방지 false ex) con.setAutoCommit(false);
			대화객체
			stmt = con.createStatement(sql)
			stmt.executeUpdate();
			commit 처리.
			con.commit()
			자원해제
			
# a03_productList.jsp
  A03_ShoppingDao.java
 기준으로 조회, 등록, 수정, 삭제
함께 해보기..
1. 조회 처리
	1) sql 작성..
		물건명 (keyword검색) like
		가격( @@@ ~ @@@ ) between
SELECT * 
FROM product
WHERE 1=1 
AND name LIKE '%'||''||'%'
AND price BETWEEN 1000 AND 9999999		
		
	2) 메서드 선언 (매개변수)
	3) 화면 UI 변경
		물건명 : [    ]
		가격 :[    ] ~ [    ]
		[검색]		
	ex) 화면 UI 변경, 요청값 전달 처리 조회 데이터 list
		처리..
	 		
			
# PreparedStatement 객체 활용..
1. 목적.
	1) 보안상 : sql injection의 방지..
		sql을 동적인 문자열 조합에의 만들면 sql script를 통해 
		%, 또는 만들어지는 script를 입력하면 보안상에 문제가 발생한다.
		select *
		from member
		where id = 'himan' pass= 7777
		==> sql을 동적으로 변경시켜서 처리되게 하면 모든 계정과 
		데이터를 확인할 수 있게 된다.
		pass에 입력할 내용에 pass:[888 or 1=1]
		where id = 'himan' pass= 888 or 1=1 인증이 모두다 된다.
	2) 속도개선.
		- db 서버  sql 컴파일 실행 
			새로운 sql 들어올 때, 동일한 sql은 기존 컴파일된 내용
			을 실행.
		- select *
			from member
		  where id = 'himan' pass= 7777 동적 query는 id, pass
		  바뀔 때 마다 재컴파일,
		  select *
			from member
		  where id = ? pass= ?
		  동일한 sql로 인식..
		  param으로 컴파일 후, 데이터 전달 속도 개선 효과가 있다.
2. 사용방법.
	1) sql에 변경될 데이터를 ?로 처리.
	2) Statement ==> PreparedStatement로 처리.
	3) ?의 갯수만큼 해당 내용에 들어 데이터
		pstmt.setXXX(?순위 index, 들어갈 데이터)			
			
2. 등록 처리
	1) 화면 UI 설정.
		버튼, js로 등록화면 이동처리.
	2) 등록화면 등록에 필요한 화면구현..
		물건종류, 물건명, 가격, 재고량.
	3) 등록 클릭,
	4) 요청값 받기, 입력 Product객체에 할당.
	5) DB등록 메서드 구현
	6) 입력 Product객체로 등록 메서드 호출 및 처리.
 
			
			
			
			
	
	
	
	
	