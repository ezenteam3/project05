1. jsp의 session scope의 범위별로 4가지 객체를 기술하세요.

=>	pageContext : 활용되는 객체가 한 페이지 단위에서 데이터를 저장하고 활용.
	request:  요청 page까지 데이터를 저장하고 활용.
	session : 브라우저가 닫힐 때까지 데이터를 저장하고 활용.
	application : 서버 단위로 데이터를 저장하고 활용.
	
======================================================================
2. session 객체를 이용하여, 로그인한 회원의 정보를 페이지가 닫힐 때까지 유지되도록 코드 처리하세요.
	회원정보(아이디, 이름, 포인트)

=>	현재 페이지
<body>
<%
	ArrayList<Member0311> m0311 = new ArrayList<Member0311>();
	m0311.add(new Member0311("cocoa","코코아",1500));
	m0311.add(new Member0311("latte","라떼",800));
	m0311.add(new Member0311("americano","아메리카노",350));
	
	session.setAttribute("m0311", m0311);
%>
	<h1>현재 페이지에서 호출</h1>
<%
	ArrayList<Member0311> mCall = (ArrayList)session.getAttribute("m0311");
	for(int i=0; i<mCall.size(); i++){
%>
		아이디 : <%=mCall.get(i).getId()%>
		이름 : <%=mCall.get(i).getName()%>
		포인트 : <%=mCall.get(i).getPoint()%> 
		<br>
<%		
	}
%>
	<a href="ex0311_2_2.jsp">다음 페이지에서 호출</a>
</body>

------------이동 페이지(여러 페이지에 똑같은 코드 사용해 이동해도 데이터 계속 유지)-----------------------

<body>
	<h1>이동한 페이지에서 호출</h1>
<%
	ArrayList<Member0311> mCall = (ArrayList)session.getAttribute("m0311");
	for(int i=0; i<mCall.size(); i++){
%>
		아이디 : <%=mCall.get(i).getId()%>
		이름 : <%=mCall.get(i).getName()%>
		포인트 : <%=mCall.get(i).getPoint()%> 
		<br>
<%		
	}
%>
</body>

======================================================================
3. 웹 서버에서 지정한 file 서버의 물리적 위치를 지정하여 해당 서버를 통해 처리하고자 한다.
	해당 물리적 위치를 지정하고 호출하여 사용하자.

=>	Web.xml 파일에서 <param-name>값과 <param-value>를 저장한다.

  <context-param>  
  	<param-name>oraUser</param-name>
	<param-value>scott</param-value>  
  </context-param> 
  
  	jsp파일에서 아래 코드로 확인한다.
  	<param-name>은 key로 <param-value>은 val로 받아서 확인.
 <%	
  	 Enumeration initParam = application.getInitParameterNames();
 	while(initParam.hasMoreElements()){
 		String key = (String)initParam.nextElement();
 		String val = (String)application.getInitParameter(key);
 %>
 	<h4><%=key %> = <%=val %></h4>
 <%	}
 %>

======================================================================
4. out객체의 buffer 메모리를 확인하고, 버퍼를 플러시 할 때 사용되는 메소드를 기술하세요.

=>	버퍼 관련 메소드(buffer-웹 프로그램에서 임시 메모리를 통해 보다 효과적으로 화면 처리를 해주는 기능)
		- int getBufferSize() : 버퍼의 크기를 구한다.
		- int getRemaining() : 현재 버퍼의 남은 크기를 구한다.
		- clear() : 버퍼의 내용을 비운다. 만약 버퍼가 이미 플러시 되었다면
					IOException을 발생시킨다.
		- clearBuffer() : 버퍼의 내용을 비운다.
		- flush() : 버퍼를 플러시 한다.
		- boolean isAutoFlush() : 버퍼가 다 찼을 때, 자동으로 플러시 할 경우 true를 리턴한다.
		
	buffer 메모리 확인
		-> 버퍼 크기 구하기 : int getBufferSize()
		-> 남은 버퍼 크기 구하기 : int getRemaining()
	
	buffer 플러시
		-> flush()

======================================================================
5. 로그인 id/pass를 입력하고, 남/여에 따른 사이트가 다르게 이동될 때 로그인한 id가 해당 사이트까지 전송되게
	처리하려고 한다. session 4가지 객체중 하나를 활용하여 처리하세요.
	로그인
	ID	[	]	===> Gentleman @@@님 환영합니다.
	PWD	[	]	===> Lady @@@님 환영합니다.
	()남	()여
	[ 로그인 ]
	
=>	
<body>
<form method="post">
<h1>로그인</h1>
아이디 : <input type="text" name="id">				<br>
비밀번호 : <input type="password" name="pw">		<br>
<input type="radio" name="radio" value="M">남
<input type="radio" name="radio" value="W">여	<br>
<button type="submit">로그인</button>
</form>
<%
	String id = request.getParameter("id");
	String pw = request.getParameter("pw");
	String gen = request.getParameter("radio");
	boolean isLogin=false;

	if(id!=null && pw!= null){
		if(id.equals("cocoa") && pw.equals("1234")){
			session.setAttribute("id", id);
			if(gen.equals("M")){
				response.sendRedirect("ex0311_5_M.jsp");
			}else{
				response.sendRedirect("ex0311_5_W.jsp");
			}
		}else{
			isLogin=true;
		}
	}
%>
</body>
<script type="text/javascript">
	var isLogin=<%=isLogin%>;
	if(isLogin){
		alert("로그인 실패!!")
	}
</script>

-------------------M 페이지-------------------------------------

<body>
<%
	String id = (String)session.getAttribute("id");
%>
<h1>Gentleman <%=id%>님 환영합니다.</h1>
</body>

-------------------W 페이지-------------------------------------

<body>
<%
	String id = (String)session.getAttribute("id");
%>
<h1>Lady <%=id %>님 환영합니다.</h1>
</body>

======================================================================
