1. url의 구성요소를 
http://192.168.0.23:7080/jspexp/a01_start.jsp?id=himan&pass=777
를 기준으로 구분하여 기술하세요.

	[프로토콜]://[호스트][:포트]/[경로][파일명][.확장자명][query string]

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
2. jsp화면을 크게 구분하여, 상단/body에 들어갈 요소를 기술하세요.
	
	최상단: jsp 페이지에 대한 설정 정보를 선언
	body: 화면에 출력처리하는 표현 영역

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
3. 스크립트 요소 3가지를 구구단을 프로그램을 기준으로 예를들어 설명하세요.

	스크립트릿: 자바 코드를 실행. 자바의 변수를 선언하거나 조건 반복문의 로직을 수행한다. <% %>
			 <%
   				int i;
    			int j;
    			int k;
    		%>
    		
	표현식: 변수를 통해 값을 출력. %=변수명
			<td><%=i%>단</td>
			
	선언부: 자바 메소드(함수)를 정의. %! % 사이에 선언
			<% for(i=2;i<10;i++){ %>
    		<td><%=i%>단</td>
    		<%}%>
    		
	구구단 표 만들기 ★
	
	<body>
		<h1>구구단</h1>
    		<table border=1>
    			<tr>
    				<td></td>
    				<% for(i=2;i<10;i++){ %>
   			 		<td><%=i%>단</td>
    				<%}%>
    			</tr>
    				<% for(j=1;j<10;j++){%>
    			<tr>
    				<td><%=j %></td>
        			<% for(k=2;k<10;k++){ %>
       				<td><%=k%>X<%=j%>=<%=k*j%></td>
        			<%}%>
    			</tr>
    				<%}%>
    
    		</table>
	</body>

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
4. page 디렉티브 중에 contentType은 어떤 역할을 하는 속성인지를 기술하세요.

	jsp가 생성할 문서의 타입을 지정한다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
5. java로 클래스로 물건명, 가격, 갯수를 정의하여, jsp에서 활용하고자 한다.
	해당 코드를 처리하는 순서와 코드를 기술하세요.
	
	<h3>물건명:<%=p01.getName() %></h3>
	<h3>가격:<%=p01.getPrice() %></h3>
	<h3>갯수:<%=p01.getCnt() %></h3>
	
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
6. &name=홍길동&age=25&loc=강남  이라는 url매개변수 값을 jsp에서 처리하고자 한다.
   jsp 기본객체를 통해서 위 요청값을 처리하되 null일때는 문자열을 ""으로,
   숫자는 0으로 처리되게 하여 h1에서 이름:@@@ 나이:@@ 사는 곳:@@이 화면에 
   나오게 코드하세요.
   
	
   
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
7. jsp 코드를 이용하여 3X3테이블에 임의의 무지개 색상을 각 cell의 배경
	색상으로 나타나게 for문으로 이용하여 처리하세요.
	
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■	
8. jsp의 내장 객체가 무엇인지 기술하세요

	▶ 개념 
		스트립트릿(<% %>이나 표현식(<%= %>)에서 선언하지 않고 사용 가능한 default변수.
		jsp 페이지 내에서 제공하는 특수한 레퍼런스 타입의 변수
		jsp가 서블릿으로 변환될 때 자동으로 삽입시켜주는 변수 
		
	▶ 특징
		jsp가 서블릿으로 변환시 자동으로 제공해준다.
		별도의 import없이 자유롭게 사용 가능하다.
		스크립트릿 내에서 변수 이름으로 사용해서는 안된다.
		
	▶ 종류: request, response, application, out, session
	
		▷ request 내장객체: 사용자 요청과 관련된 기능을 제공하는 내장객체.
						 주요 클라이언트에서 서버로 전달되는 정보를 처리하기 위해 사용
						 대표적으로 html폼을 통해 입력된 값을 jsp에서 가져올 때 사용한다.
						 
			- getParamenerNames(): 현재 요청에 포함된 매개변수의 이름을 열거 형태로 넘겨준다.
			- getParameter(name): 문자열 name과 이름이 같은 매개변수의 값을 가져온다.
			- gerParamenterValues(name): 문자열 name과 이름이 같은 매개변수의 값을 배열형태로 가져온다. checkbox, multipel list등에 주로 사용한다.
			- getCookies(): 모든 쿠키 값을 javax.servlet.hppt.Cookie의 형태로 가져온다.
			- getMethod(): 현재 요청이 get이나 post형태로 가져온다.
			- getSession(): 현재 세션의 객체를 가져온다.
			- getRemoteAddr(): 클라이언트의 ip주소를 알려준다.
			- getProtocol(): 현재 서버의 프로토콜문
			- setCharacterEncoding(): 현재 jsp로 전달되는 내용을 지정한 캐릭터셋으로 변환해준다. html폼에서 한글 입력을 정상적으로 처리해주려면 반드시 필요하다
			
		▷ response 내장객체: request와 반대되는 개념으로, 사용자 응답과 관련된 기능을 제공
						 사용자 요청을 처리하고 응답을 다른 페이지로 전달하는 등의 기능을 제공
						 
			- setContentType(type): 문자열 형태의 type에 지정된 MIME으로 content Type을 설정
			- setHeader(name,value): 문자열 name의 이름으로 문자열 value의 값을 헤더로 세팅 
			- setDateHeader(name,date): 문자열 name의 이름으로 date에 설정된 밀리세컨드 시간 값을 헤더에 설정
			- sendError(status,msg: 오류코드를 세팅하고 메시지를 보냄
			- sendRedirect(url): 클라이언트 요청을 다른페이지로 보냄.
			
		▷ application 내장객체: - application은 웹 애플리케이션(컨텍스트) 전체를 관리하는 객체로 application 객체를 통해 각 서블릿이나 JSP에서 공유하려고 하는 각종 정보를 설정하고 참조할 수 있다.
							application은 javax.servletContext객체에 대한 참조 변수로써, config 객체를 통해 생성한다.
							ServletContext 객체는 컨터이너와 관련된 여러정보를 제공하며, application참조 변수를 통해서 서블릿이 실행되는 환경이나 서버 자원과 관련한 정보를 얻거나 로그파일을 기록하는 작업등을 수행한다.
							application 내장객체는 일반적으로 톰캣의 시작과 종료 라이프사이클을 가진다.
							유형별로 많은 메서드를 제공하므로 주로 관리 기능의 웹 애플리케이션 개발에 유용하다.
			
			- getServerInfo(): JSP/서블릿 컨테이너의 이름과 버전을 반환한다.
			- getMajorVersion(): 컨테이너가 지원하는 서블릿 API의 주 버전정보를 반환한다.
			- getMinorVersion(): 컨테이너가 지원하는 서블릿 API의 하위버전 정보를 반환한다.
			

		▷ out 내장객체: out은 출력스트림으로써, 사용자 웹 브라우저로 출력하기 위한 내장 객체임.
					스트립트에서 브라우저로 덱스트를 출력하는 데 사용
					out은 javax.servlet.jspWriter객체의 참조변스로, 버퍼관련 메서드와 출력 관련 메서드로 구성되며, out를 이용해서 출력한 내용은 서버의 콘솔이 아닌 사용자에게 전달된다
			
			- getBufferSize(): output buffer의크기를 바이트로 알려준다. 
			- getRemaining(): 남아있는 버퍼의 크기중 사용가능한 비율을 알려준다. 
			- clearBuffer(): 버퍼에 있는 콘텐트를 모두 지운다 
			- flush(): 버퍼를 비우고 output stream도 비운다. 
			- close(): output stream을 닫고 버퍼를 비운다
			- println(content): content의 내용을 newline과 함께 출력한다
			- print(content): content의 내용을 출력한다.
			
			
		▷ session 내장객체: HTTP프로토콜이 비연결형 프로토콜이기 때문에 출력된 다음에는 클라이언트와 연결이 끊어진다. 따라서 한번 로그인한 사용자가 로그아웃할 때 까지 페이지를 이동해도 보관해야 할 정보가 있다면 이에 대한 처리가 매우 곤란해진다.
						이러한 HTTP프로토콜 문제점을 해결하려고 나온 것이 쿠기와 세션이다.
						session은 javax.servlet.http.Http Session 인터페이스 참조 변수 이다.
						session은 접속하는 사용자 별로 따로 생성되며 일정시간 유지되고 소멸된다.
						이러한 세션의 특징을 이용해 setAttribute()메서드를 이용해 임의의 값을 저장해놓고 활용할 수 있다.
						 세션이 주로 사용되는 경우

						① 사용자 로그인 후 세션을 설정하고, 일정시간이 지난 경우 다시 사용자 인증을 요구 할 때.
						② 쇼핑물에서 장바구니 기능을 구현할 때.
						③ 사용자의 페이지 이동 동선 등 웹페이지 트래킹 분석 기능 등을 구현 할때. 

			- getId(): 각 접속에 대한 세션 고유의 ID를 문자열 형태로 반환한다. 
			- getCreatingTime(): 세션 생성기간을 January 1,1970 GMT부터 long형 밀리세컨드 값으로 반환 한다. 
			- getLastAccessedTime(): 현재세션으로 마지막 작업한 시간을 long형 밀리세컨드 값으로 반환한다.
			- getMaxInactiveInterval(): 세션의 유지시간을 초로 반환한다. 이를통해 세션의 유효시간을 알수 있다.
			- setMaxInactiveInterval(t): 세션의 유효시간을 t에 설정된 초 값으로 설정한다.
			- invalidate(): 현재 세션을 종료한다. 세션과 관련된 값들을 모두 지워진다.
			- getAttribute(attr): 문자열 attr로 설정된 세션값을 java.lang.Object 형태로 반환한다.
			- setAttribute(name,attr): 문자열 name으로 java.lang.Object attr을 설정한다.


